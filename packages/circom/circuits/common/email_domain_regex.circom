pragma circom 2.1.5;

include "zk-regex-circom/circuits/regex_helpers.circom";

template EmailDomainRegex(msg_bytes) {
	signal input msg[msg_bytes];
	signal output out;

	var num_bytes = msg_bytes+1;
	signal in[num_bytes];
	in[0]<==255;
	for (var i = 0; i < msg_bytes; i++) {
		in[i+1] <== msg[i];
	}

	component eq[72][num_bytes];
	component lt[20][num_bytes];
	component and[15][num_bytes];
	component multi_or[6][num_bytes];
	signal states[num_bytes+1][4];
	component state_changed[num_bytes];

	states[0][0] <== 1;
	for (var i = 1; i < 4; i++) {
		states[0][i] <== 0;
	}

	for (var i = 0; i < num_bytes; i++) {
		state_changed[i] = MultiOR(3);
		lt[0][i] = LessEqThan(8);
		lt[0][i].in[0] <== 65;
		lt[0][i].in[1] <== in[i];
		lt[1][i] = LessEqThan(8);
		lt[1][i].in[0] <== in[i];
		lt[1][i].in[1] <== 90;
		and[0][i] = AND();
		and[0][i].a <== lt[0][i].out;
		and[0][i].b <== lt[1][i].out;
		lt[2][i] = LessEqThan(8);
		lt[2][i].in[0] <== 95;
		lt[2][i].in[1] <== in[i];
		lt[3][i] = LessEqThan(8);
		lt[3][i].in[0] <== in[i];
		lt[3][i].in[1] <== 126;
		and[1][i] = AND();
		and[1][i].a <== lt[2][i].out;
		and[1][i].b <== lt[3][i].out;
		eq[0][i] = IsEqual();
		eq[0][i].in[0] <== in[i];
		eq[0][i].in[1] <== 33;
		eq[1][i] = IsEqual();
		eq[1][i].in[0] <== in[i];
		eq[1][i].in[1] <== 35;
		eq[2][i] = IsEqual();
		eq[2][i].in[0] <== in[i];
		eq[2][i].in[1] <== 36;
		eq[3][i] = IsEqual();
		eq[3][i].in[0] <== in[i];
		eq[3][i].in[1] <== 37;
		eq[4][i] = IsEqual();
		eq[4][i].in[0] <== in[i];
		eq[4][i].in[1] <== 38;
		eq[5][i] = IsEqual();
		eq[5][i].in[0] <== in[i];
		eq[5][i].in[1] <== 39;
		eq[6][i] = IsEqual();
		eq[6][i].in[0] <== in[i];
		eq[6][i].in[1] <== 42;
		eq[7][i] = IsEqual();
		eq[7][i].in[0] <== in[i];
		eq[7][i].in[1] <== 43;
		eq[8][i] = IsEqual();
		eq[8][i].in[0] <== in[i];
		eq[8][i].in[1] <== 45;
		eq[9][i] = IsEqual();
		eq[9][i].in[0] <== in[i];
		eq[9][i].in[1] <== 46;
		eq[10][i] = IsEqual();
		eq[10][i].in[0] <== in[i];
		eq[10][i].in[1] <== 47;
		eq[11][i] = IsEqual();
		eq[11][i].in[0] <== in[i];
		eq[11][i].in[1] <== 48;
		eq[12][i] = IsEqual();
		eq[12][i].in[0] <== in[i];
		eq[12][i].in[1] <== 49;
		eq[13][i] = IsEqual();
		eq[13][i].in[0] <== in[i];
		eq[13][i].in[1] <== 50;
		eq[14][i] = IsEqual();
		eq[14][i].in[0] <== in[i];
		eq[14][i].in[1] <== 51;
		eq[15][i] = IsEqual();
		eq[15][i].in[0] <== in[i];
		eq[15][i].in[1] <== 52;
		eq[16][i] = IsEqual();
		eq[16][i].in[0] <== in[i];
		eq[16][i].in[1] <== 53;
		eq[17][i] = IsEqual();
		eq[17][i].in[0] <== in[i];
		eq[17][i].in[1] <== 54;
		eq[18][i] = IsEqual();
		eq[18][i].in[0] <== in[i];
		eq[18][i].in[1] <== 55;
		eq[19][i] = IsEqual();
		eq[19][i].in[0] <== in[i];
		eq[19][i].in[1] <== 56;
		eq[20][i] = IsEqual();
		eq[20][i].in[0] <== in[i];
		eq[20][i].in[1] <== 57;
		eq[21][i] = IsEqual();
		eq[21][i].in[0] <== in[i];
		eq[21][i].in[1] <== 61;
		eq[22][i] = IsEqual();
		eq[22][i].in[0] <== in[i];
		eq[22][i].in[1] <== 63;
		eq[23][i] = IsEqual();
		eq[23][i].in[0] <== in[i];
		eq[23][i].in[1] <== 255;
		and[2][i] = AND();
		and[2][i].a <== states[i][0];
		multi_or[0][i] = MultiOR(26);
		multi_or[0][i].in[0] <== and[0][i].out;
		multi_or[0][i].in[1] <== and[1][i].out;
		multi_or[0][i].in[2] <== eq[0][i].out;
		multi_or[0][i].in[3] <== eq[1][i].out;
		multi_or[0][i].in[4] <== eq[2][i].out;
		multi_or[0][i].in[5] <== eq[3][i].out;
		multi_or[0][i].in[6] <== eq[4][i].out;
		multi_or[0][i].in[7] <== eq[5][i].out;
		multi_or[0][i].in[8] <== eq[6][i].out;
		multi_or[0][i].in[9] <== eq[7][i].out;
		multi_or[0][i].in[10] <== eq[8][i].out;
		multi_or[0][i].in[11] <== eq[9][i].out;
		multi_or[0][i].in[12] <== eq[10][i].out;
		multi_or[0][i].in[13] <== eq[11][i].out;
		multi_or[0][i].in[14] <== eq[12][i].out;
		multi_or[0][i].in[15] <== eq[13][i].out;
		multi_or[0][i].in[16] <== eq[14][i].out;
		multi_or[0][i].in[17] <== eq[15][i].out;
		multi_or[0][i].in[18] <== eq[16][i].out;
		multi_or[0][i].in[19] <== eq[17][i].out;
		multi_or[0][i].in[20] <== eq[18][i].out;
		multi_or[0][i].in[21] <== eq[19][i].out;
		multi_or[0][i].in[22] <== eq[20][i].out;
		multi_or[0][i].in[23] <== eq[21][i].out;
		multi_or[0][i].in[24] <== eq[22][i].out;
		multi_or[0][i].in[25] <== eq[23][i].out;
		and[2][i].b <== multi_or[0][i].out;
		lt[4][i] = LessEqThan(8);
		lt[4][i].in[0] <== 65;
		lt[4][i].in[1] <== in[i];
		lt[5][i] = LessEqThan(8);
		lt[5][i].in[0] <== in[i];
		lt[5][i].in[1] <== 90;
		and[3][i] = AND();
		and[3][i].a <== lt[4][i].out;
		and[3][i].b <== lt[5][i].out;
		lt[6][i] = LessEqThan(8);
		lt[6][i].in[0] <== 94;
		lt[6][i].in[1] <== in[i];
		lt[7][i] = LessEqThan(8);
		lt[7][i].in[0] <== in[i];
		lt[7][i].in[1] <== 126;
		and[4][i] = AND();
		and[4][i].a <== lt[6][i].out;
		and[4][i].b <== lt[7][i].out;
		lt[8][i] = LessEqThan(8);
		lt[8][i].in[0] <== 65;
		lt[8][i].in[1] <== in[i];
		lt[9][i] = LessEqThan(8);
		lt[9][i].in[0] <== in[i];
		lt[9][i].in[1] <== 90;
		and[5][i] = AND();
		and[5][i].a <== lt[8][i].out;
		and[5][i].b <== lt[9][i].out;
		lt[10][i] = LessEqThan(8);
		lt[10][i].in[0] <== 95;
		lt[10][i].in[1] <== in[i];
		lt[11][i] = LessEqThan(8);
		lt[11][i].in[0] <== in[i];
		lt[11][i].in[1] <== 126;
		and[6][i] = AND();
		and[6][i].a <== lt[10][i].out;
		and[6][i].b <== lt[11][i].out;
		eq[24][i] = IsEqual();
		eq[24][i].in[0] <== in[i];
		eq[24][i].in[1] <== 33;
		eq[25][i] = IsEqual();
		eq[25][i].in[0] <== in[i];
		eq[25][i].in[1] <== 35;
		eq[26][i] = IsEqual();
		eq[26][i].in[0] <== in[i];
		eq[26][i].in[1] <== 36;
		eq[27][i] = IsEqual();
		eq[27][i].in[0] <== in[i];
		eq[27][i].in[1] <== 37;
		eq[28][i] = IsEqual();
		eq[28][i].in[0] <== in[i];
		eq[28][i].in[1] <== 38;
		eq[29][i] = IsEqual();
		eq[29][i].in[0] <== in[i];
		eq[29][i].in[1] <== 39;
		eq[30][i] = IsEqual();
		eq[30][i].in[0] <== in[i];
		eq[30][i].in[1] <== 42;
		eq[31][i] = IsEqual();
		eq[31][i].in[0] <== in[i];
		eq[31][i].in[1] <== 43;
		eq[32][i] = IsEqual();
		eq[32][i].in[0] <== in[i];
		eq[32][i].in[1] <== 45;
		eq[33][i] = IsEqual();
		eq[33][i].in[0] <== in[i];
		eq[33][i].in[1] <== 46;
		eq[34][i] = IsEqual();
		eq[34][i].in[0] <== in[i];
		eq[34][i].in[1] <== 47;
		eq[35][i] = IsEqual();
		eq[35][i].in[0] <== in[i];
		eq[35][i].in[1] <== 48;
		eq[36][i] = IsEqual();
		eq[36][i].in[0] <== in[i];
		eq[36][i].in[1] <== 49;
		eq[37][i] = IsEqual();
		eq[37][i].in[0] <== in[i];
		eq[37][i].in[1] <== 50;
		eq[38][i] = IsEqual();
		eq[38][i].in[0] <== in[i];
		eq[38][i].in[1] <== 51;
		eq[39][i] = IsEqual();
		eq[39][i].in[0] <== in[i];
		eq[39][i].in[1] <== 52;
		eq[40][i] = IsEqual();
		eq[40][i].in[0] <== in[i];
		eq[40][i].in[1] <== 53;
		eq[41][i] = IsEqual();
		eq[41][i].in[0] <== in[i];
		eq[41][i].in[1] <== 54;
		eq[42][i] = IsEqual();
		eq[42][i].in[0] <== in[i];
		eq[42][i].in[1] <== 55;
		eq[43][i] = IsEqual();
		eq[43][i].in[0] <== in[i];
		eq[43][i].in[1] <== 56;
		eq[44][i] = IsEqual();
		eq[44][i].in[0] <== in[i];
		eq[44][i].in[1] <== 57;
		eq[45][i] = IsEqual();
		eq[45][i].in[0] <== in[i];
		eq[45][i].in[1] <== 61;
		eq[46][i] = IsEqual();
		eq[46][i].in[0] <== in[i];
		eq[46][i].in[1] <== 63;
		and[7][i] = AND();
		and[7][i].a <== states[i][1];
		multi_or[1][i] = MultiOR(27);
		multi_or[1][i].in[0] <== and[3][i].out;
		multi_or[1][i].in[1] <== and[4][i].out;
		multi_or[1][i].in[2] <== and[5][i].out;
		multi_or[1][i].in[3] <== and[6][i].out;
		multi_or[1][i].in[4] <== eq[24][i].out;
		multi_or[1][i].in[5] <== eq[25][i].out;
		multi_or[1][i].in[6] <== eq[26][i].out;
		multi_or[1][i].in[7] <== eq[27][i].out;
		multi_or[1][i].in[8] <== eq[28][i].out;
		multi_or[1][i].in[9] <== eq[29][i].out;
		multi_or[1][i].in[10] <== eq[30][i].out;
		multi_or[1][i].in[11] <== eq[31][i].out;
		multi_or[1][i].in[12] <== eq[32][i].out;
		multi_or[1][i].in[13] <== eq[33][i].out;
		multi_or[1][i].in[14] <== eq[34][i].out;
		multi_or[1][i].in[15] <== eq[35][i].out;
		multi_or[1][i].in[16] <== eq[36][i].out;
		multi_or[1][i].in[17] <== eq[37][i].out;
		multi_or[1][i].in[18] <== eq[38][i].out;
		multi_or[1][i].in[19] <== eq[39][i].out;
		multi_or[1][i].in[20] <== eq[40][i].out;
		multi_or[1][i].in[21] <== eq[41][i].out;
		multi_or[1][i].in[22] <== eq[42][i].out;
		multi_or[1][i].in[23] <== eq[43][i].out;
		multi_or[1][i].in[24] <== eq[44][i].out;
		multi_or[1][i].in[25] <== eq[45][i].out;
		multi_or[1][i].in[26] <== eq[46][i].out;
		and[7][i].b <== multi_or[1][i].out;
		multi_or[2][i] = MultiOR(2);
		multi_or[2][i].in[0] <== and[2][i].out;
		multi_or[2][i].in[1] <== and[7][i].out;
		states[i+1][1] <== multi_or[2][i].out;
		state_changed[i].in[0] <== states[i+1][1];
		eq[47][i] = IsEqual();
		eq[47][i].in[0] <== in[i];
		eq[47][i].in[1] <== 64;
		and[8][i] = AND();
		and[8][i].a <== states[i][1];
		and[8][i].b <== eq[47][i].out;
		states[i+1][2] <== and[8][i].out;
		state_changed[i].in[1] <== states[i+1][2];
		lt[12][i] = LessEqThan(8);
		lt[12][i].in[0] <== 65;
		lt[12][i].in[1] <== in[i];
		lt[13][i] = LessEqThan(8);
		lt[13][i].in[0] <== in[i];
		lt[13][i].in[1] <== 90;
		and[9][i] = AND();
		and[9][i].a <== lt[12][i].out;
		and[9][i].b <== lt[13][i].out;
		lt[14][i] = LessEqThan(8);
		lt[14][i].in[0] <== 97;
		lt[14][i].in[1] <== in[i];
		lt[15][i] = LessEqThan(8);
		lt[15][i].in[0] <== in[i];
		lt[15][i].in[1] <== 122;
		and[10][i] = AND();
		and[10][i].a <== lt[14][i].out;
		and[10][i].b <== lt[15][i].out;
		eq[48][i] = IsEqual();
		eq[48][i].in[0] <== in[i];
		eq[48][i].in[1] <== 45;
		eq[49][i] = IsEqual();
		eq[49][i].in[0] <== in[i];
		eq[49][i].in[1] <== 46;
		eq[50][i] = IsEqual();
		eq[50][i].in[0] <== in[i];
		eq[50][i].in[1] <== 48;
		eq[51][i] = IsEqual();
		eq[51][i].in[0] <== in[i];
		eq[51][i].in[1] <== 49;
		eq[52][i] = IsEqual();
		eq[52][i].in[0] <== in[i];
		eq[52][i].in[1] <== 50;
		eq[53][i] = IsEqual();
		eq[53][i].in[0] <== in[i];
		eq[53][i].in[1] <== 51;
		eq[54][i] = IsEqual();
		eq[54][i].in[0] <== in[i];
		eq[54][i].in[1] <== 52;
		eq[55][i] = IsEqual();
		eq[55][i].in[0] <== in[i];
		eq[55][i].in[1] <== 53;
		eq[56][i] = IsEqual();
		eq[56][i].in[0] <== in[i];
		eq[56][i].in[1] <== 54;
		eq[57][i] = IsEqual();
		eq[57][i].in[0] <== in[i];
		eq[57][i].in[1] <== 55;
		eq[58][i] = IsEqual();
		eq[58][i].in[0] <== in[i];
		eq[58][i].in[1] <== 56;
		eq[59][i] = IsEqual();
		eq[59][i].in[0] <== in[i];
		eq[59][i].in[1] <== 57;
		and[11][i] = AND();
		and[11][i].a <== states[i][2];
		multi_or[3][i] = MultiOR(14);
		multi_or[3][i].in[0] <== and[9][i].out;
		multi_or[3][i].in[1] <== and[10][i].out;
		multi_or[3][i].in[2] <== eq[48][i].out;
		multi_or[3][i].in[3] <== eq[49][i].out;
		multi_or[3][i].in[4] <== eq[50][i].out;
		multi_or[3][i].in[5] <== eq[51][i].out;
		multi_or[3][i].in[6] <== eq[52][i].out;
		multi_or[3][i].in[7] <== eq[53][i].out;
		multi_or[3][i].in[8] <== eq[54][i].out;
		multi_or[3][i].in[9] <== eq[55][i].out;
		multi_or[3][i].in[10] <== eq[56][i].out;
		multi_or[3][i].in[11] <== eq[57][i].out;
		multi_or[3][i].in[12] <== eq[58][i].out;
		multi_or[3][i].in[13] <== eq[59][i].out;
		and[11][i].b <== multi_or[3][i].out;
		lt[16][i] = LessEqThan(8);
		lt[16][i].in[0] <== 65;
		lt[16][i].in[1] <== in[i];
		lt[17][i] = LessEqThan(8);
		lt[17][i].in[0] <== in[i];
		lt[17][i].in[1] <== 90;
		and[12][i] = AND();
		and[12][i].a <== lt[16][i].out;
		and[12][i].b <== lt[17][i].out;
		lt[18][i] = LessEqThan(8);
		lt[18][i].in[0] <== 97;
		lt[18][i].in[1] <== in[i];
		lt[19][i] = LessEqThan(8);
		lt[19][i].in[0] <== in[i];
		lt[19][i].in[1] <== 122;
		and[13][i] = AND();
		and[13][i].a <== lt[18][i].out;
		and[13][i].b <== lt[19][i].out;
		eq[60][i] = IsEqual();
		eq[60][i].in[0] <== in[i];
		eq[60][i].in[1] <== 45;
		eq[61][i] = IsEqual();
		eq[61][i].in[0] <== in[i];
		eq[61][i].in[1] <== 46;
		eq[62][i] = IsEqual();
		eq[62][i].in[0] <== in[i];
		eq[62][i].in[1] <== 48;
		eq[63][i] = IsEqual();
		eq[63][i].in[0] <== in[i];
		eq[63][i].in[1] <== 49;
		eq[64][i] = IsEqual();
		eq[64][i].in[0] <== in[i];
		eq[64][i].in[1] <== 50;
		eq[65][i] = IsEqual();
		eq[65][i].in[0] <== in[i];
		eq[65][i].in[1] <== 51;
		eq[66][i] = IsEqual();
		eq[66][i].in[0] <== in[i];
		eq[66][i].in[1] <== 52;
		eq[67][i] = IsEqual();
		eq[67][i].in[0] <== in[i];
		eq[67][i].in[1] <== 53;
		eq[68][i] = IsEqual();
		eq[68][i].in[0] <== in[i];
		eq[68][i].in[1] <== 54;
		eq[69][i] = IsEqual();
		eq[69][i].in[0] <== in[i];
		eq[69][i].in[1] <== 55;
		eq[70][i] = IsEqual();
		eq[70][i].in[0] <== in[i];
		eq[70][i].in[1] <== 56;
		eq[71][i] = IsEqual();
		eq[71][i].in[0] <== in[i];
		eq[71][i].in[1] <== 57;
		and[14][i] = AND();
		and[14][i].a <== states[i][3];
		multi_or[4][i] = MultiOR(14);
		multi_or[4][i].in[0] <== and[12][i].out;
		multi_or[4][i].in[1] <== and[13][i].out;
		multi_or[4][i].in[2] <== eq[60][i].out;
		multi_or[4][i].in[3] <== eq[61][i].out;
		multi_or[4][i].in[4] <== eq[62][i].out;
		multi_or[4][i].in[5] <== eq[63][i].out;
		multi_or[4][i].in[6] <== eq[64][i].out;
		multi_or[4][i].in[7] <== eq[65][i].out;
		multi_or[4][i].in[8] <== eq[66][i].out;
		multi_or[4][i].in[9] <== eq[67][i].out;
		multi_or[4][i].in[10] <== eq[68][i].out;
		multi_or[4][i].in[11] <== eq[69][i].out;
		multi_or[4][i].in[12] <== eq[70][i].out;
		multi_or[4][i].in[13] <== eq[71][i].out;
		and[14][i].b <== multi_or[4][i].out;
		multi_or[5][i] = MultiOR(2);
		multi_or[5][i].in[0] <== and[11][i].out;
		multi_or[5][i].in[1] <== and[14][i].out;
		states[i+1][3] <== multi_or[5][i].out;
		state_changed[i].in[2] <== states[i+1][3];
		states[i+1][0] <== 1 - state_changed[i].out;
	}

	component final_state_result = MultiOR(num_bytes+1);
	for (var i = 0; i <= num_bytes; i++) {
		final_state_result.in[i] <== states[i][3];
	}
	out <== final_state_result.out;

	signal is_consecutive[msg_bytes+1][2];
	is_consecutive[msg_bytes][1] <== 1;
	for (var i = 0; i < msg_bytes; i++) {
		is_consecutive[msg_bytes-1-i][0] <== states[num_bytes-i][3] * (1 - is_consecutive[msg_bytes-i][1]) + is_consecutive[msg_bytes-i][1];
		is_consecutive[msg_bytes-1-i][1] <== state_changed[msg_bytes-i].out * is_consecutive[msg_bytes-1-i][0];
	}
	signal is_substr0[msg_bytes][3];
	signal is_reveal0[msg_bytes];
	signal output reveal0[msg_bytes];
	for (var i = 0; i < msg_bytes; i++) {
		is_substr0[i][0] <== 0;
		is_substr0[i][1] <== is_substr0[i][0] + states[i+1][2] * states[i+2][3];
		is_substr0[i][2] <== is_substr0[i][1] + states[i+1][3] * states[i+2][3];
		is_reveal0[i] <== is_substr0[i][2] * is_consecutive[i][1];
		reveal0[i] <== in[i+1] * is_reveal0[i];
	}
}